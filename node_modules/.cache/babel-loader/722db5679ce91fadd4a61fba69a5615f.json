{"ast":null,"code":"/*\n * Transforms `path` into its relative `base` version\n * If base isn't part of the path provided returns absolute path e.g. `~/app`\n */\nexport const relativePath = function () {\n  let base = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  let path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : location.pathname;\n  return !path.toLowerCase().indexOf(base.toLowerCase()) ? path.slice(base.length) || \"/\" : \"~\" + path;\n};\nexport const absolutePath = function (to) {\n  let base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n  return to[0] === \"~\" ? to.slice(1) : base + to;\n};","map":{"version":3,"names":["relativePath","base","arguments","length","undefined","path","location","pathname","toLowerCase","indexOf","slice","absolutePath","to"],"sources":["/Users/s_likhith/Desktop/CV/Portfolio/my-portfolio/node_modules/wouter/paths.js"],"sourcesContent":["/*\n * Transforms `path` into its relative `base` version\n * If base isn't part of the path provided returns absolute path e.g. `~/app`\n */\nexport const relativePath = (base = \"\", path = location.pathname) =>\n  !path.toLowerCase().indexOf(base.toLowerCase())\n    ? path.slice(base.length) || \"/\"\n    : \"~\" + path;\n\nexport const absolutePath = (to, base = \"\") =>\n  to[0] === \"~\" ? to.slice(1) : base + to;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,MAAMA,YAAY,GAAG,SAAAA,CAAA;EAAA,IAACC,IAAI,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EAAA,IAAEG,IAAI,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGI,QAAQ,CAACC,QAAQ;EAAA,OAC9D,CAACF,IAAI,CAACG,WAAW,CAAC,CAAC,CAACC,OAAO,CAACR,IAAI,CAACO,WAAW,CAAC,CAAC,CAAC,GAC3CH,IAAI,CAACK,KAAK,CAACT,IAAI,CAACE,MAAM,CAAC,IAAI,GAAG,GAC9B,GAAG,GAAGE,IAAI;AAAA;AAEhB,OAAO,MAAMM,YAAY,GAAG,SAAAA,CAACC,EAAE;EAAA,IAAEX,IAAI,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EAAA,OACxCU,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,GAAGA,EAAE,CAACF,KAAK,CAAC,CAAC,CAAC,GAAGT,IAAI,GAAGW,EAAE;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}